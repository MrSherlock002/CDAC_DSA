package com.acts;

import java.io.File;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Iterator;

import com.acts.LinkedList;
import com.acts.LinkedList.Node;

public class DeleteDuplicate {

	public static void displayFiles(File[] files) throws NoSuchAlgorithmException, IOException  {
		int i = 1;
		int allData_counter = 1;
		int dups_counter = 1;
//				ArrayList<String> allData = new ArrayList<String>();
//				ArrayList<String> dups = new ArrayList<String>();
//			
		LinkedList allData = new LinkedList();
		LinkedList dups = new LinkedList();

		MessageDigest mdigest = MessageDigest.getInstance("MD5");

		for(File filename : files) {

			if(filename.isDirectory()) {
				System.out.println("Directory : "+filename.getName());
				displayFiles(filename.listFiles());
			}
			else {
				System.out.println(i+". File : "+filename.getAbsolutePath());
				++i;
			}

			String checksum = checksum(mdigest, filename);
			
			if(!allData.contains(checksum)) {
				allData.add(checksum);
				allData_counter+=1;
			}
			else {
				//System.out.println("hi");
				dups.add(checksum);
				dups_counter +=1;
				//To delete the duplicate file.
//				Path p1 = Paths.get(filename.getAbsolutePath());
//				Files.delete(p1);

			}
			System.out.println(checksum);	
		}

		System.out.println("\nList of unique hashcode : ");
		allData.Print();		

		System.out.println("\nList of duplicate hashcode : ");
		dups.Print();
	}


	private static String checksum(MessageDigest digest,File file)throws IOException {
		// Get file input stream for reading the file
		// content
		FileInputStream fis = new FileInputStream(file);

		// Create byte array to read data in chunks
		byte[] byteArray = new byte[1024];
		int bytesCount = 0;

		// read the data from file and update that data in
		// the message digest
		while ((bytesCount = fis.read(byteArray)) != -1)
		{
			digest.update(byteArray, 0, bytesCount);
		};

		// close the input stream
		fis.close();

		// store the bytes returned by the digest() method
		byte[] bytes = digest.digest();

		// this array of bytes has bytes in decimal format
		// so we need to convert it into hexadecimal format

		// for this we create an object of StringBuilder
		// since it allows us to update the string i.e. its
		// mutable
		StringBuilder sb = new StringBuilder();

		// loop through the bytes array
		for (int i = 0; i < bytes.length; i++) {

			// the following line converts the decimal into
			// hexadecimal format and appends that to the
			// StringBuilder object
			sb.append(Integer
					.toString((bytes[i] & 0xff) + 0x100, 16)
					.substring(1));
		}

		// finally we return the complete hash
		return sb.toString();
	}
}
