package com.acts;

public class BST {
	Node root;
	static class Node{
		int data;
		Node lchild;
		Node rchild;
		
		int counter =0;

		Node(int element){
			this.data = element;
			lchild = null;
			rchild = null;
		}

		boolean isLeaf() {
			return lchild == null ? rchild == null : false;
		}
	}
	
	
	
	public BST() {
		root = null;
	}

	public Node getRoot() {
		return root;
	}
	
	
	public int countLeafNodes() {
		return countLeaves(root);
	}
	
	public int countLeaves(Node a) {
		if(a==null) {
			return 0;
		}
		if(a.isLeaf()) {
			return 1;
		}
		else {
			return countLeaves(a.lchild) + countLeaves(a.rchild);
		}
	}
	
	public int freqCounter(int element) {
		return freqcnt();
		
	}
	public int freqcnt() {
		Node a = this.root;
		if(a==null) {
			return;
		}
		//Step 1 : Process the root node.
		System.out.print(" "+a.data);

		//Step 2 : Process the root's left side.
		if(root.lchild!=null) {
			preOrder(a.lchild);
		}

		//Step 3 : Process the root's right side.
		if(a.rchild!=null) {
			preOrder(a.rchild);
		}
		return ;
	}
	
	

	void insertInTree(Node ptr, int data) {
		if(ptr==null) {
			ptr = new Node(data);
			this.root = ptr;
		}
		else {
			if(ptr.data>data && ptr.lchild!=null) {
				insertInTree(ptr.lchild, data);
			}
			else if(ptr.data>data) {
				ptr.lchild = new Node(data);
			}
			else if(ptr.data<data && ptr.rchild!=null) {
				insertInTree(ptr.rchild, data);
			}
			else {
				ptr.rchild = new Node(data);
			}
		}
	}

	public void preOrder(Node root) {
		if(root==null) {
			return;
		}
		//Step 1 : Process the root node.
		System.out.print(" "+root.data);

		//Step 2 : Process the root's left side.
		if(root.lchild!=null) {
			preOrder(root.lchild);
		}

		//Step 3 : Process the root's right side.
		if(root.rchild!=null) {
			preOrder(root.rchild);
		}
	}

	

	public void inOrder(Node root) {
		if(root==null) {
			return;
		}
		//Step 1 : Process the root's left side.
		if(root.lchild!=null) {
			inOrder(root.lchild);
		}

		//Step 2 : Process the root node.
		System.out.print(" "+root.data);

		//Step 3 : Process the root's right side.
		if(root.rchild!=null) {
			inOrder(root.rchild);
		}
	}
	

	public void postOrder(Node root) {
		if(root==null) {
			return;
		}
		//Step 1 : Process the root's left side.
		if(root.lchild!=null) {
			postOrder(root.lchild);
		}

		//Step 2 : Process the root's right side.
		if(root.rchild!=null) {
			postOrder(root.rchild);
		}

		//Step 3 : Process the root node.
		System.out.print(" "+root.data);
	}
}
